(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (music)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :spacing 15 :halign "end"
    (box :class "volume" :orientation "h" (
        metric 
        :label {(volume > 80 ? "Û∞ïæ" : (volume > 40 ? "Û∞ñÄ" : (volume > 0 ? "Û∞ïø" : "Û∞ùü")))}
        :value volume
        :onchange "pamixer --set-volume {}"
      )
    )
    (box :class "memory" :orientation "h" (metric :label "Û∞çõ"
        :value {EWW_RAM.used_mem_perc}
      :onchange ""))
    (box :class "disk_usage" :orientation "h" (metric :label "Û∞ãä"
        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
      :onchange ""))
    (box :class "time" :orientation "h" time)))

(defwidget workspaces []
  (box :class "workspaces"
    :orientation "h"
    :space-evenly true
    :halign "start"
    (button :onclick "hyprctl dispatch workspace 1" 1)
    (button :onclick "hyprctl dispatch workspace 2" 2)
    (button :onclick "hyprctl dispatch workspace 3" 3)
    (button :onclick "hyprctl dispatch workspace 4" 4)
    (button :onclick "hyprctl dispatch workspace 5" 5)
    (button :onclick "hyprctl dispatch workspace 6" 6)
    (button :onclick "hyprctl dispatch workspace 7" 7)
    (button :onclick "hyprctl dispatch workspace 8" 8)
    (button :onclick "hyprctl dispatch workspace 9" 9)))

(defwidget music []
  (box :class "music"
    :orientation "h"
    :space-evenly false
    :halign "center"
  {music != "" ? "üéµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
    :class "metric"
    :space-evenly false
    (box :class "label" label)
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value value
    :onchange onchange)))



(deflisten music :initial ""
"playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "100ms"
"/home/tiago/cartom-sd/nix-configuration/homes/x86_64-linux/tiago@nixos-lenovo/eww-config/get-volume.nu")

(defpoll time :interval "1s"
"date '+%H:%M %b %d, %Y'")

(defwindow bar
  :monitor 0
  :geometry (geometry :x "0%"
    :y "2.5%"
    :width "97%"
    :height "5%"
  :anchor "top center")
  :reserve (struts :side "top" :distance "5%")
  :exclusive true
  :namespace "bar"
  :stacking "bottom"
  (bar))